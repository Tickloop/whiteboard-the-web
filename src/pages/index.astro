---
export const prerender = false;

import Layout from "~layouts/Layout.astro";
import Card from "~components/Card.astro";
import CtaLink from "~components/CtaLink.astro";
import VideoEmbed from "~components/Video.astro";
import Subscribe from "../components/Subscribe.astro";
import Search from "../components/icons/Search.astro";
import { getVideosWithThumbnail } from "../db";

const query = new URL(Astro.request.url).searchParams.get("query");

const videos = await getVideosWithThumbnail(query ?? undefined);
---

<Layout title="#whiteboardtheweb" canonicalBase="" preconnectToYoutube={true}>
  <header>
    <div class="heading">
      <h1 transition:name="heading" id="whiteboardtheweb__heading">
        #WhiteboardtheWeb
      </h1>
    </div>
    <ul class="social-links" role="list">
      <li>
        <a
          target="_blank"
          rel="noreferrer"
          href="https://www.youtube.com/@bholmesdev">YouTube</a
        >
      </li>
      <li>
        <a
          target="_blank"
          rel="noreferrer"
          href="https://twitter.com/bholmesdev">Twitter</a
        >
      </li>
      <li>
        <a
          target="_blank"
          rel="noreferrer"
          href="https://tiktok.com/@bholmesdev">TikTok</a
        >
      </li>
    </ul>
    <Subscribe />
    <wtw-search>
      <form>
        <input
          type="search"
          name="query"
          data-target="wtw-search.input"
          data-action="input:wtw-search#onSearch"
          transition:persist
          placeholder="React, Tailwind, Astro..."
        />
        <Search />
      </form>
    </wtw-search>
  </header>
  <main class="list">
    {
      videos.map(
        async ({
          id,
          title,
          description,
          slug,
          youtubeUrl,
          embedUrl,
          thumbnails,
        }) => {
          return (
            <Card {title} {slug} {youtubeUrl}>
              {/* TODO: parse markdown*/}
              <Fragment set:html={description} slot="body" />
              <VideoEmbed
                slot="video"
                {id}
                {title}
                {embedUrl}
                {thumbnails}
                hasColorIntersectionObserver
              />
            </Card>
          );
        }
      )
    }
    <CtaLink href="https://twitter.com/hashtag/whiteboardtheweb?f=live">
      Explore full #whiteboardtheweb archive
    </CtaLink>
  </main>
</Layout>

<script>
  import { colorIntersectionObserver, debounce } from "~utils";
  import { controller, target } from "@github/catalyst";
  import { navigate } from "astro:transitions/client";

  // shift bg color back to heading color
  // when heading scrolls into view
  const heading = document.getElementById("whiteboardtheweb__heading");
  if (heading) {
    const isTopOfPageObserver = colorIntersectionObserver(heading);
    isTopOfPageObserver.observe(heading);
  }

  @controller
  class WtwSearchElement extends HTMLElement {
    @target declare input: HTMLInputElement;

    onSearch = debounce(this.#handleInput, 300);

    #handleInput() {
      navigate(`/?query=${this.input.value}`);
    }
  }
</script>

<style>
  .heading {
    display: grid;
    margin-block: 1rem;
  }

  h1 {
    margin: 0;
    font-size: var(--font-size-xxl) !important;
    color: hsl(var(--color-hs), 20%) !important;
    text-align: center;
  }

  .social-links {
    padding: 0;
    margin-block-end: 3rem;
    list-style: none;
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .social-links a,
  .social-links a:visited {
    color: hsl(var(--color-hs), 40%);
    text-decoration: none;
    font-weight: 700;
    transition: opacity 0.2s;
  }

  .social-links a:hover {
    opacity: 0.7;
  }

  .list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .list :global(article):nth-child(4n + 1) {
    --color: var(--orange);
    --color-hs: var(--orange-hs);
  }

  .list :global(article):nth-child(4n + 2) {
    --color: var(--green);
    --color-hs: var(--green-hs);
  }

  .list :global(article):nth-child(4n + 3) {
    --color: var(--pink);
    --color-hs: var(--pink-hs);
  }

  .list :global(article):nth-child(4n + 4) {
    --color: var(--purple);
    --color-hs: var(--purple-hs);
  }

  form {
    display: flex;
    align-items: center;
    margin-block-end: 1rem;
    background-color: hsl(var(--color-hs), 95%);
    border-radius: 0.5rem;
    color: hsl(var(--color-hs), 30%);
    padding-inline: 1.6rem;
    gap: 0.8rem;
  }

  form input {
    border-radius: inherit;
    background-color: inherit;
    border: none;
    padding-block: 0.6rem;
    font-size: inherit;
    font-family: inherit;
    flex: 1;
  }
  form input::placeholder {
    color: hsl(var(--color-hs), 70%);
  }
  form:focus-within {
    outline: hsl(var(--color-hs), 50%) auto 2px;
  }
  form input:focus {
    outline: none;
  }
  form :global(svg) {
    color: hsl(var(--color-hs), 30%);
    width: 1.2em;
    height: 1.2em;
  }
</style>
